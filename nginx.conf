worker_processes auto;

events {
    use epoll;
    worker_connections 1024;
    multi_accept on;
}

http {
    server_tokens off;
    map $http_accept $harvester_accept_type {
        default "";
        "~*application/rdf\+xml"    "application/rdf+xml";
        "~*text/turtle"             "text/turtle";
        "~*application/ld\+json"    "application/ld+json";
        "~*application/n-triples"   "application/n-triples";
        "~*application/n-quads"     "application/n-quads";
        "~*application/trig"        "application/trig";
        "~*application/trix"        "application/trix";
        "~*application/rdf\+json"   "application/rdf+json";
        "~*text/n3"                 "text/n3";
    }
    map $http_accept $resource_accept_type {
        default "";
        "~*application/json"        "application/json";
    }

    map $http_accept $rss_atom_type {
        default "";
        "~*application/rss\+xml"    "application/rss+xml";
        "~*application/atom\+xml"   "application/atom+xml";
    }

    server {

        listen 8080;
        server_name default_server;
        port_in_redirect off;

        set $csp_reports https://europe-west1-digdir-cloud-functions.cloudfunctions.net/cloud-logging-csp-staging;
        set $csp_policy_fdk_portal "default-src 'self'; require-trusted-types-for 'script'; script-src 'self' https://heatmaps.monsido.com https://app-script.monsido.com https://sparql.staging.fellesdatakatalog.digdir.no 'unsafe-inline' 'unsafe-eval'; style-src 'self' https://altinncdn.no https://fonts.googleapis.com 'unsafe-inline'; object-src 'none'; base-uri 'self'; connect-src 'self' https://fellesdatakatalog.digdir.no https://*.fellesdatakatalog.digdir.no https://europe-west1-digdir-cloud-functions.cloudfunctions.net https://heatmaps.monsido.com https://prefix.cc https://rdf.kartverket.no; font-src 'self' https://altinncdn.no https://fonts.gstatic.com; frame-src 'self' https://sso.staging.fellesdatakatalog.digdir.no https://www.youtube.com; img-src 'self' https://orglogo.difi.no https://tracking.monsido.com; manifest-src 'self'; media-src 'self'; worker-src 'none'; report-uri ${csp_reports};";
        set $csp_policy_static_rdf "base-uri 'self'; default-src 'self'; script-src 'self' cdnjs.cloudflare.com code.jquery.com; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; font-src 'self' https://fonts.gstatic.com; frame-ancestors 'none'; report-uri ${csp_reports};";
        set $csp_policy_validator "base-uri 'self'; default-src 'self'; connect-src 'self' https://*.fellesdatakatalog.digdir.no; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; font-src 'self' https://fonts.gstatic.com https://res-1.cdn.office.net; frame-ancestors 'none'; report-uri ${csp_reports};";
        
        #remove www
        if ($host ~* '^www\.(.*)$') {
            return 301 $scheme://$1$request_uri ;
        }

        #remove all instances of trailing slashes
        rewrite ^/(.*)/$ /$1 permanent;

        proxy_http_version          1.1;
        proxy_set_header Connection "";
        proxy_connect_timeout       600;
        proxy_send_timeout          600;
        proxy_read_timeout          600;
        send_timeout                600;

        client_max_body_size 50M;

        # Compression

        # Enable Gzip compressed.
        gzip on;

        # Enable compression both for HTTP/1.0 and HTTP/1.1.
        gzip_http_version  1.1;

        # Compression level (1-9).
        # 5 is a perfect compromise between size and cpu usage, offering about
        # 75% reduction for most ascii files (almost identical to level 9).
        gzip_comp_level    5;

        # Don't compress anything that's already small and unlikely to shrink much
        # if at all (the default is 20 bytes, which is bad as that usually leads to
        # larger files after gzipping).
        gzip_min_length    256;

        # Compress data even for clients that are connecting to us via proxies,
        # identified by the "Via" header (required for CloudFront).
        gzip_proxied       any;

        # Tell proxies to cache both the gzipped and regular version of a resource
        # whenever the client's Accept-Encoding capabilities header varies;
        # Avoids the issue where a non-gzip capable client (which is extremely rare
        # today) would display gibberish if their proxy gave them the gzipped version.
        gzip_vary          on;

        # Compress all output labeled with one of the following MIME-types.
        gzip_types
            application/atom+xml
            application/javascript
            application/json
            application/rss+xml
            application/x-font-ttf
            application/x-web-app-manifest+json
            application/xhtml+xml
            application/xml
            font/opentype
            image/svg+xml
            image/x-icon
            text/css
            text/plain
            text/x-component
            text/turtle;

        # Short term caching
        open_file_cache max=1000 inactive=20s;
        open_file_cache_valid 30s;
        open_file_cache_min_uses 5;
        open_file_cache_errors off;

        # several our API-s determine response type by Accept header, so it must be declared as vary key for caches
        # since adding header overrides effect of "gzip_vary on", we need to add Accept-Encoding manually again
        add_header 'Vary' 'Accept, Accept-Encoding';
        add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload;' always;
        add_header X-Robots-Tag 'noindex, nofollow, nosnippet, noarchive' always;

        location ~* /(health|prometheus|actuator)/* {
            return 404;
        }

        #redirect dataservices to data-services
        location ~* ^(/api)?/dataservices(.*) {
            return 301 $1/data-services$2;
        }

        #redirect informationmodels to information-models
        location ~* ^(/api)?/informationmodels(.*) {
            return 301 /information-models$1;
        }

        location ~* /api/apis/.+ {
            rewrite /api/apis(.*) $1 break;
            proxy_pass http://fdk-api-endpoints:8080;
        }

        location /api/apis {
            return 301 https://${host}/api/data-services;
        }

        location ~* /apis(.*) {
            return 301 https://${host}/data-services$1;
        }

        location /api/concepts {
            location ~* /api/concepts/.+ {
                if ($harvester_accept_type) {
                    rewrite /api/concepts(.*) /concepts$1 break;
                    proxy_pass http://fdk-concept-harvester:8080;
                }
                if ($resource_accept_type) {
                    rewrite /api/concepts(.*) /concepts$1 break;
                    proxy_pass http://fdk-resource-service:8080;
                }
                return 303 https://${host}/concepts;
            }
            if ($harvester_accept_type) {
                rewrite /api/concepts(.*) /collections$1 break;
                proxy_pass http://fdk-concept-harvester:8080;
            }
            if ($resource_accept_type) {
                rewrite /api/concepts(.*) /concepts$1 break;
                proxy_pass http://fdk-resource-service:8080;
            }
            if ($http_accept ~* "text/html") {
                return 303 https://${host}/concepts;
            }
            return 303 https://concepts.${host}/collections;
        }

        location /api/data-services {
            location ~* /api/data-services/.+ {
                if ($harvester_accept_type) {
                    rewrite /api/data-services(.*) /dataservices$1 break;
                    proxy_pass http://fdk-dataservice-harvester:8080;
                }
                if ($resource_accept_type) {
                    rewrite /api/data-services(.*) /data-services$1 break;
                    proxy_pass http://fdk-resource-service:8080;
                }
                return 303 https://${host}/data-services;
            }
            if ($harvester_accept_type) {
                rewrite /api/data-services(.*) /catalogs$1 break;
                proxy_pass http://fdk-dataservice-harvester:8080;
            }
            if ($resource_accept_type) {
                rewrite /api/data-services(.*) /data-services$1 break;
                proxy_pass http://fdk-resource-service:8080;
            }
            if ($http_accept ~* "text/html") {
                return 303 https://${host}/data-services;
            }
            return 303 https://dataservices.${host}/catalogs;
        }

        location /api/dataset/preview {
            rewrite /dataset/preview(.*) /preview$1 break;
            proxy_pass http://fdk-dataset-preview-service:8080;
        }

        location /api/datasets {
            location ~* /api/datasets/.* {
                if ($harvester_accept_type) {
                    rewrite /api/datasets(.*) /datasets$1 break;
                    proxy_pass http://fdk-dataset-harvester:8080;
                }
                if ($resource_accept_type) {
                    rewrite /api/datasets(.*) /datasets$1 break;
                    proxy_pass http://fdk-resource-service:8080;
                }
                return 303 https://${host}/datasets;
            }
            if ($harvester_accept_type) {
                rewrite /api/datasets(.*) /catalogs$1 break;
                proxy_pass http://fdk-dataset-harvester:8080;
            }
            if ($resource_accept_type) {
                rewrite /api/datasets(.*) /datasets$1 break;
                proxy_pass http://fdk-resource-service:8080;
            }
            if ($http_accept ~* "text/html") {
                return 303 https://${host}/datasets;
            }
            return 303 https://datasets.${host}/catalogs;
        }

        location /api/events {
            if ($harvester_accept_type) {
                rewrite /api/events(.*) /events$1 break;
                proxy_pass http://fdk-event-harvester:8080;
            }
            if ($resource_accept_type) {
                rewrite /api/events(.*) /events$1 break;
                proxy_pass  http://fdk-resource-service:8080;
            }
            return 303 https://${host}/events;
        }

        location /api/information-models {
            location ~* /api/information-models/.* {
                if ($harvester_accept_type) {
                    rewrite /api/information-models(.*) /informationmodels$1 break;
                    proxy_pass http://fdk-informationmodel-harvester:8080;
                }
                if ($resource_accept_type) {
                    rewrite /api/information-models(.*) /information-models$1 break;
                    proxy_pass  http://fdk-resource-service:8080;
                }
                return 303 https://${host}/information-models;
            }
            if ($harvester_accept_type) {
                rewrite /api/information-models(.*) /catalogs$1 break;
                proxy_pass http://fdk-informationmodel-harvester:8080;
            }
            if ($resource_accept_type) {
                rewrite /api/information-models(.*) /information-models$1 break;
                proxy_pass http://fdk-resource-service:8080;
            }
            if ($http_accept ~* "text/html") {
                return 303 https://${host}/information-models;
            }
            return 303 https://informationmodels.${host}/catalogs;
        }

        location /api/public-services {
            if ($harvester_accept_type) {
                rewrite /api/public-services(.*) /public-services$1 break;
                proxy_pass http://fdk-public-service-harvester:8080;
            }
            if ($resource_accept_type) {
                rewrite /api/public-services(.*) /services$1 break;
                proxy_pass  http://fdk-resource-service:8080;
            }
            return 303 https://${host}/public-services;
        }

        location /concepts {
            location ~* /concepts/.+ {
                if ($harvester_accept_type) {
                    proxy_pass http://fdk-concept-harvester:8080;
                }
                if ($resource_accept_type) {
                    proxy_pass http://fdk-resource-service:8080;
                }
                if ($http_accept ~* "text/html") {
                    proxy_pass http://fdk-portal:8080;
                    add_header Content-Security-Policy-Report-Only $csp_policy_fdk_portal always;
                }
            }
            if ($harvester_accept_type) {
                rewrite /concepts(.*) /collections$1 break;
                proxy_pass http://fdk-concept-harvester:8080;
            }
            if ($resource_accept_type) {
                proxy_pass http://fdk-resource-service:8080;
            }
            #portal
            proxy_pass http://fdk-portal:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_fdk_portal always;
        }

        location /data-services {
            location ~* /data-services/.+ {
                if ($harvester_accept_type) {
                    rewrite /data-services(.*) /dataservices$1 break;
                    proxy_pass http://fdk-dataservice-harvester:8080;
                }
                if ($resource_accept_type) {
                    proxy_pass http://fdk-resource-service:8080;
                }
                if ($http_accept ~* "text/html") {
                    proxy_pass http://fdk-portal:8080;
                    add_header Content-Security-Policy-Report-Only $csp_policy_fdk_portal always;
                }
            }
            if ($harvester_accept_type) {
                rewrite /data-services(.*) /dataservices$1 break;
                proxy_pass http://fdk-dataservice-harvester:8080;
            }
            if ($resource_accept_type) {
                proxy_pass http://fdk-resource-service:8080;
            }
            #portal
            proxy_pass http://fdk-portal:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_fdk_portal always;
        }

        location = /data/rss.xml {
            proxy_set_header Accept "application/rss+xml";
            rewrite /data/rss.xml(.*) /$1 break;
            proxy_pass http://fdk-rss-atom-feed:8080;
        }

        location /datasets.rss {
            proxy_set_header Accept "application/rss+xml";
            rewrite /datasets.rss(.*) /$1 break;
            proxy_pass http://fdk-rss-atom-feed:8080;
        }

        location /datasets.atom {
            proxy_set_header Accept "application/atom+xml";
            rewrite /datasets.atom(.*) /$1 break;
            proxy_pass http://fdk-rss-atom-feed:8080;
        }

        location /datasets {
            location ~* /datasets/.+ {
                if ($harvester_accept_type) {
                    proxy_pass http://fdk-dataset-harvester:8080;
                }
                if ($resource_accept_type) {
                    proxy_pass http://fdk-resource-service:8080;
                }
                if ($http_accept ~* "text/html") {
                    proxy_pass http://fdk-portal:8080;
                    add_header Content-Security-Policy-Report-Only $csp_policy_fdk_portal always;
                }
            }
            if ($harvester_accept_type) {
                rewrite /datasets(.*) /catalogs$1 break;
                proxy_pass http://fdk-dataset-harvester:8080;
            }
            if ($http_accept ~* "application/json") {
                proxy_pass http://fdk-resource-service:8080;
            }
            if ($rss_atom_type) {
                rewrite /datasets(.*) /$1 break;
                proxy_pass http://fdk-rss-atom-feed:8080;
            }
            #portal
            proxy_pass http://fdk-portal:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_fdk_portal always;
        }

        location /dataset/preview {
            rewrite /dataset/preview(.*) /preview$1 break;
            proxy_pass http://fdk-dataset-preview-service:8080;
        }

        location /endpoints {
            proxy_pass http://fdk-api-endpoints:8080;
        }

        location /events {
            if ($harvester_accept_type) {
                proxy_pass http://fdk-event-harvester:8080;
            }
            if ($resource_accept_type) {
                proxy_pass http://fdk-resource-service:8080;
            }
            #portal
            proxy_pass http://fdk-portal:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_fdk_portal always;
        }

        location /forms {
            proxy_set_header host $host;
            proxy_set_header X-forward-for $proxy_add_x_forwarded_for;
            proxy_pass http://forms-frontend:8080;
        }

        location /next/home {
            proxy_set_header host $host;
            proxy_set_header X-forward-for $proxy_add_x_forwarded_for;
            proxy_pass http://frontpage-frontend:8080;
        }

        location /information-models {
            location ~* /information-models/.* {
                if ($harvester_accept_type) {
                    rewrite /information-models(.*) /informationmodels$1 break;
                    proxy_pass http://fdk-informationmodel-harvester:8080;
                }
                if ($resource_accept_type) {
                    rewrite /information-models(.*) /information-models$1 break;
                    proxy_pass http://fdk-resource-service:8080;
                }
                if ($http_accept ~* "text/html") {
                    proxy_pass http://fdk-portal:8080;
                    add_header Content-Security-Policy-Report-Only $csp_policy_fdk_portal always;
                }
            }
            if ($harvester_accept_type) {
                rewrite /information-models(.*) /catalogs$1 break;
                proxy_pass http://fdk-informationmodel-harvester:8080;
            }
            if ($resource_accept_type) {
                proxy_pass http://fdk-resource-service:8080;
            }
            #portal
            proxy_pass http://fdk-portal:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_fdk_portal always;
        }

        location /ping {
            return 200;
        }

        location /public-services {
            if ($harvester_accept_type) {
                proxy_pass http://fdk-public-service-harvester:8080;
            }
            if ($resource_accept_type) {
                rewrite /public-services(.*) /services$1 break;
                proxy_pass  http://fdk-resource-service:8080;
            }
            #portal
            proxy_pass http://fdk-portal:8080;
            add_header $csp_policy_fdk_portal always;
        }

        location /ready {
            return 200;
        }

        location /reference-data {
             rewrite .+?(reference-data\/?)(.*) /reference-data/$2 break;
             proxy_pass http://reference-data:8080;
        }

        location /search-all {
            proxy_pass http://fdk-portal:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_fdk_portal always;
        }

        location = /showroom {
            return 303 https://${host}/showroom/overview;
        }

        location /validator {
            proxy_pass http://dcat-ap-no-validator-gui:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_validator always;
        }

        location ~* ^/(examples|specification|vocabulary|guide|docs|licence|showroom) {
            proxy_pass http://static-rdf-nginx:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_static_rdf always;
        }

        location ~* /nlod/en/.+ {
            rewrite /nlod/en(.*) /licence/nlod$1 break;
            proxy_set_header Accept-language en;
            proxy_pass http://static-rdf-nginx:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_static_rdf always;
        }

        location /nlod/en {
            rewrite /nlod/en(.*) /licence/nlod break;
            proxy_set_header Accept-language en;
            proxy_pass http://static-rdf-nginx:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_static_rdf always;
        }

        location ~* /nlod/no/.+ {
            rewrite /nlod/no(.*) /licence/nlod$1 break;
            proxy_set_header Accept-language nb;
            proxy_pass http://static-rdf-nginx:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_static_rdf always;
        }

        location /nlod/no {
            rewrite /nlod/no(.*) /licence/nlod break;
            proxy_set_header Accept-language nb;
            proxy_pass http://static-rdf-nginx:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_static_rdf always;
        }

        location /nlod {
            rewrite /nlod(.*) /licence/nlod$1 break;
            proxy_set_header Accept-language nb;
            proxy_pass http://static-rdf-nginx:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_static_rdf always;
        }

        root /var/www/;

        error_page            502 @maintenance;
        error_page            503 @maintenance;
        location @maintenance {
           rewrite ^(.*)$     /http-error/maintenance.html break;
        }

        location /http-error/ {
          # Specifies that a given location can only be used for internal requests.
          # returns a 404 Not Found http error if accessed directly.
          internal;
        }

        location /undefined {
            return 404;
        }

        location / {
            if ($request_method = POST) {
                proxy_pass http://static-rdf-nginx:8080;
            }
            proxy_pass http://fdk-portal:8080;
            add_header Content-Security-Policy-Report-Only $csp_policy_fdk_portal always;
        }
    }
}
