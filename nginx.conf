 events {
  worker_connections  1024;
}

http {

    server {

        listen 8080;
        server_name default_server;

        #check if environment is temorary. If not, it is permanent (P)
        #https redirect should only occur on permanent environments
        if ($host ~ ^tmp-) {
          set $tempenv 1;
        }

        if ($host ~ ^localhost) {
          set $tempenv 1;
        }

        if ($tempenv != 1 ) {
          set $test P;
        }

        #if http it is unsecure (U)
        if ($http_x_forwarded_proto = "http") {
           set $test "${test}U";
        }

        #if it is a permanent environment and it is unsecure
        if ($test = PU) {
           return 301 https://$host$request_uri;
        }

        proxy_connect_timeout       600;
        proxy_send_timeout          600;
        proxy_read_timeout          600;
        send_timeout                600;

        client_max_body_size 50M;

        # Compression

         # Enable Gzip compressed.
         gzip on;

        # Enable compression both for HTTP/1.0 and HTTP/1.1.
        gzip_http_version  1.1;

        # Compression level (1-9).
        # 5 is a perfect compromise between size and cpu usage, offering about
        # 75% reduction for most ascii files (almost identical to level 9).
        gzip_comp_level    5;

        # Don't compress anything that's already small and unlikely to shrink much
        # if at all (the default is 20 bytes, which is bad as that usually leads to
        # larger files after gzipping).
        gzip_min_length    256;

        # Compress data even for clients that are connecting to us via proxies,
        # identified by the "Via" header (required for CloudFront).
        gzip_proxied       any;

        # Tell proxies to cache both the gzipped and regular version of a resource
        # whenever the client's Accept-Encoding capabilities header varies;
        # Avoids the issue where a non-gzip capable client (which is extremely rare
        # today) would display gibberish if their proxy gave them the gzipped version.
        gzip_vary          on;

        # Compress all output labeled with one of the following MIME-types.
        gzip_types
          application/atom+xml
          application/javascript
          application/json
          application/rss+xml
          application/x-font-ttf
          application/x-web-app-manifest+json
          application/xhtml+xml
          application/xml
          font/opentype
          image/svg+xml
          image/x-icon
          text/css
          text/plain
          text/x-component;

        # several our API-s determine response type by Accept header, so it must be declared as vary key for caches
        # since adding header overrides effect of "gzip_vary on", we need to add Accept-Encoding manually again
        add_header 'Vary' 'Accept, Accept-Encoding';

        location /api/apis {
            rewrite /api/apis(.*) /apis$1 break;
            proxy_pass http://api-cat:8080;
        }

        location /api/concepts {
            rewrite /api/concepts(.*) /concepts$1 break;
            proxy_pass http://concept-cat:8080;
        }

        location /api/informationmodels {
            rewrite /api/informationmodels(.*) /informationmodels$1 break;
            proxy_pass http://informationmodel-cat:8080;
        }

        location /api/publishers {
            rewrite /api/publishers(.*) /publishers$1 break;

            proxy_pass http://search-api:8080;
        }

        location /api/datasets {
            rewrite /api/datasets(.*) /datasets$1 break;

            proxy_pass http://search-api:8080;
        }

        location /api/registration {
            rewrite /api/registration(.*) /public$1 break;

            proxy_pass http://api-catalogue:8080;
        }

        location /metrics/apis {
            rewrite /metrics/apis/liveness /actuator/health break;
            rewrite /metrics/apis/readiness /actuator/readiness break;
            proxy_pass http://api-cat:8080;
        }

        location /metrics/reference-data {
            rewrite /metrics/reference-data/liveness /actuator/health break;
            rewrite /metrics/reference-data/readiness /actuator/readiness break;
            proxy_pass http://reference-data:8080;
        }

        location /reference-data {
             rewrite .+?(reference-data\/?)(.*) /$2 break;

             proxy_pass http://reference-data:8080;
        }

        location /search {

             proxy_pass http://search-api:8080;
        }

        location /datasets.rss {
            proxy_set_header Accept "application/rss+xml";
            rewrite /datasets.rss(.*) /datasets$1 break;
            proxy_pass http://search-api:8080;
        }

        location /datasets.atom {
            proxy_set_header Accept "application/atom+xml";
            rewrite /datasets.atom(.*) /datasets$1 break;
            proxy_pass http://search-api:8080;
        }

        location /datasets {

           if ($http_accept ~* "application/json") {
               proxy_pass  http://search-api:8080;
           }
           if ($http_accept ~* "text/turtle") {
               proxy_pass  http://search-api:8080;
           }
           if ($http_accept ~* "application/ld\+json") {
               proxy_pass  http://search-api:8080;
           }
           if ($http_accept ~* "application/rdf\+xml") {
               proxy_pass  http://search-api:8080;
           }
           if ($http_accept ~* "application/rss\+xml") {
               proxy_pass  http://search-api:8080;
           }
           if ($http_accept ~* "application/atom\+xml") {
               proxy_pass  http://search-api:8080;
           }
           #default
           proxy_pass http://search:3000;
        }

        location /catalogs {
             proxy_pass http://search-api:8080;
        }

        location /publisher {
            proxy_pass http://search-api:8080;
        }

        location /publishers {
            proxy_pass http://search-api:8080;
        }

        location / {
            proxy_pass http://search:3000;
        }

    }
}
